model_args: # model construction args
  src_vocab: 32000
  tgt_vocab: 32000
  enc_layers: 6
  dec_layers: 6
  hid_size: 512
  ff_size: 2048
  n_heads: 8
  attn_bias: true
  attn_dropout: 0.1
  dropout: 0.1
  activation: gelu
  tied_emb: three-way
model_type: tfmnmt
optim:
  name: ADAM
  args:
    betas:
    - 0.9
    - 0.998
    eps: 1.0e-09
    lr: 0.2
    warmup_steps: 16000
    label_smoothing: 0.1
    constant: 2
    criterion: smooth_kld
    amsgrad: false
    weight_decay: 0
    inv_sqrt: false
prep: # data preparation
  codec_lib: nlcodec   #sentpiece
  char_coverage: 0.9995
  #max_src_types: 32000
  #max_tgt_types: 32000
  max_types: 32000
  pieces: bpe   # choices: bpe, char, word, unigram  from google/sentencepiece
  shared_vocab: true  # true means same vocab for src and tgt, false means different vocabs
  src_len: 256   # longer sentences, decision is made as per 'truncate={true,false}'
  tgt_len: 256
  train_src: data/exp10/data/train.tok.en
  train_tgt: data/exp10/data/train.tok.es
  truncate: false   # what to do with longer sentences: if true truncate at src_len or tgt_len; if false filter away
  valid_src: data/tests/dev.tok.en
  valid_tgt: data/tests/dev.tok.es
  mono_src: []  # monolingual data for learning vocab or BPE
  mono_tgt: []
tester:
  decoder:
    beam_size: 4
    batch_size: 18000
    lp_alpha: 0.6
    ensemble: 5
    max_len: 50
  suit:  # suit of tests to run after the training
    dev:
    - data/tests/dev.tok.en
    - data/tests/dev.tok.es.detok
    newstest2013:
    - data/tests/newstest2013.en.tok
    - data/tests/newstest2013.es
  # in case we want to use external de tokenizer. interface:: $detokenizer < $out > out.entok
  # by default it uses moses-tokenizer python wrapper to perl script
  #detokenizer: cut -f1 | sed 's/<unk>//g' | data/detokenizer.perl -l es
trainer:
  init_args:
    chunk_size: 60   # generation in chunks of time steps to reduce memory consumption
    grad_accum: 3
  batch_size: 25000   # not exceeding these many tokens (including paddings). in tensor2tensor it is mean batch size
  check_point: 1000  # how often to checkpoint?
  keep_models: 12   # how many checkpoints to keep on disk (small enough to save disk, large enough for checkpt averaging
  steps: 200000   # how many steps to train
  keep_in_mem: true
  early_stop:
    enabled: true
    by: loss
    patience: 10   # checkpoints
    min_steps: 16000  # wait atleast 16000
    signi_round: 3
updated_at: '2020-05-27T02:40:22.117021'
#seed: 12345

